#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long qw(GetOptions);
use Pod::Usage qw(pod2usage);

# CLI Flags/Variables
my $append_str;
my $include_matching_lines;
my $prepend_str;

GetOptions(
    'help|h' => sub { pod2usage(0) },
    'append|a=s' => \$append_str,
    'include-matching-lines|m=s' => \$include_matching_lines,
    'prepend|p=s' => \$prepend_str,
) or pod2usage(1);

unless ($prepend_str || $append_str) {
    die "Error: must specify either --append or --prepend";
}

my @input_lines = <STDIN>;
chomp(@input_lines);

my @converted_lines;
foreach my $line (@input_lines) {
    if (defined $include_matching_lines) {
        if ($line !~ /$include_matching_lines/) {
            push(@converted_lines, $line);
            next;
        }
    }

    if (defined $append_str) {
        $line = $line . $append_str;
    }
    if (defined $prepend_str) {
        $line = $prepend_str . $line;
    }
    push(@converted_lines, $line);
}

print "$_\n" for @converted_lines;

=head1 NAME

mapl - map lines

=head1 DESCRIPTION

mapl is a script to quickly append or prepend strings to each line read
from STDIN.

=head1 SYNOPSIS

mapl [OPTION(S)...]

=head1 OPTIONS

=over 4

=item B<-a, --append> STRING

Append STRING to each line read from STDIN.

Note: newlines are chomped before appending the value passed to B<--append>
and added back.

=item B<-h, --help>

Print this help and quit.

=item B<-m, --include-matching-lines> REGEX

Only append strings to lines that match REGEX.

=item B<-p, --prepend> STRING

Prepend STRING to each line read from STDIN.

=back

=cut
