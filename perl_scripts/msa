#!/usr/bin/perl
# mpc search any
use strict;
use warnings;
use List::Util qw(shuffle);
use Getopt::Long qw(GetOptions HelpMessage);
use Getopt::Long qw(:config bundling);

my $search_query = '';
my @search_results = ();

# CLI Flags/Variables
my $shuffle = 0;
my $regex = '';
my $search_type = 'any';

GetOptions(
  'filename|f' => sub { $search_type = 'filename' },
  'shuffle|s' => \$shuffle,
  'regex|r=s' => \$regex,
  'help|h' => sub { HelpMessage(0) },
) or HelpMessage(1);

parse_filenames_with_regex($regex) if $regex;

# Get search query by either joining @ARGV or asking for input
if (@ARGV) {
  $search_query = join(' ', @ARGV);
}
else {
  printf STDERR "MPC Search %s?\n", ucfirst $search_type;
  chomp($search_query = <STDIN>);
}

if ($search_query) {
  @search_results = grep { ! /\.git\// } `mpc search $search_type '$search_query'`;

  if ($shuffle) {
    print shuffle @search_results;
  }
  else {
    print @search_results;
  }
}

sub parse_filenames_with_regex {
  my ($user_regex) = @_;
  my @search_results = ();

  @search_results = grep { ! /\.git\// && /$user_regex/i } `mpc listall`;
  if ($shuffle) {
    print shuffle @search_results;
  }
  else {
    print @search_results;
  }

  exit 0;
}

=head1 NAME

msa - wrapper script for mpc's search functionality

=head1 SYNOPSIS

msa [OPTIONS]... [SEARCH_QUERY]...

If no SEARCH_QUERY, read standard input

  -f, --filename        Search mpd database using a filename query
  -s, --shuffle         Print search results in a shuffled/random order
  -r, --regex REGEX     Search filenames using regular expressions (requires a regex inside quotes)
  -h, --help            Print this help and exit

=head1 VERSION

0.01

=cut
