#!/usr/bin/perl
# mpc search any
use strict;
use warnings;
use List::Util qw(shuffle);
use Getopt::Long qw(GetOptions HelpMessage);
use Getopt::Long qw(:config bundling);

my $search_query = '';
my @search_results = ();
my %search_results_hash = ();

# CLI Flags/Variables
my $shuffle = 0;
my $regex = '';
my $search_type = 'any';
my $mpc_clear = 0;
my $mpc_play = 0;
my $enqueue = 0;
my $insert = 0;
my $number_of_results = 0;
my $quiet = 0;
my $show_cue_titles = 0;
my $exclude_regex = '';

GetOptions(
  'clear-queue|c' => \$mpc_clear,
  'enqueue|e' => \$enqueue,
  'filename|f' => sub { $search_type = 'filename' },
  'help|h' => sub { HelpMessage(0) },
  'insert|i' => \$insert,
  'number|n=i' => \$number_of_results,
  'new-queue|N' => sub {
    $mpc_clear = 1;
    $enqueue = 1;
    $mpc_play = 1;
    $quiet = 1;
  },
  'play-queue|p' => \$mpc_play,
  'quiet|q' => \$quiet,
  'regex|r=s' => \$regex,
  'shuffle|s' => \$shuffle,
  'show-cue-titles|t' => \$show_cue_titles,
  'exclude|x=s' => \$exclude_regex,
) or HelpMessage(1);

`mpc clear` if $mpc_clear;

# Get search query by either joining @ARGV or asking for input
# Manual input isn't required if @ARGV is empty and --regex is set because the
# string that's passed into regex acts as the search query
if (@ARGV) {
  $search_query = join(' ', @ARGV);
}
elsif (! $regex) {
  printf STDERR "MPC Search %s?\n", ucfirst $search_type;
  chomp($search_query = <STDIN>);
}

my $list_songs_cmd = '';
if ($show_cue_titles) {
  # Running mpc's --format (-f) option with listall significantly slows the
  # program down, so only include %title% if the --show-cue-titles flag is
  # passed
  $list_songs_cmd = 'mpc -f "%file% --- %title%" listall';
}
elsif ($search_query) {
  $list_songs_cmd = "mpc -f '%file% --- %title%' search $search_type '$search_query'";
}
else {
  $list_songs_cmd = 'mpc listall';
}

# Filter out any lines containing .git directories that git-annex creates
# Otherwise, half of the results are .git followed by hashes
%search_results_hash = map { split_files_and_titles($_) }
                       grep { ($exclude_regex) ? (! /$exclude_regex/i) : ($_) }
                       grep { ($regex) ? (/$regex/i) : ($_) }
                       grep { ! /\.git\// }
                       `$list_songs_cmd`;

@search_results = sort keys %search_results_hash;
if ($shuffle) {
  @search_results = shuffle @search_results;
}
if ($number_of_results > 0 && $number_of_results <= $#search_results) {
  @search_results = @search_results[0..$number_of_results - 1];
}

unless ($quiet) {
  # This option (--show-cue-titles) is incompatible with --shuffle
  # For consistent behavior, I decided to force the sorting
  # of the hash keys if --show-cue-titles is set
  if ($show_cue_titles) {
    foreach my $key (sort keys %search_results_hash) {
      print $key;
      if ($key =~ /\.cue\/track\d+\Z/) {
        print STDERR "\t$search_results_hash{$key}";
      }
    }
  }
  else {
    print @search_results;
  }
}

if ($enqueue) {
  pipe_to_mpc_add(\@search_results);
}
elsif ($insert) {
  pipe_to_mpc_insert(\@search_results);
}
`mpc play` if $mpc_play;

sub split_files_and_titles {
  my ($file_and_title_string) = @_;

  my ($file, $title) = split(' --- ', $file_and_title_string);

  # If split is successful, $file doesn't have newline, so add one back
  # $title will only have a value if the split was successful
  if ($title) {
    $file .= "\n";
  }

  return $file, $title;
}

sub pipe_to_mpc_cmd {
  my ($songs_ref, $cmd) = @_;

  open(my $mpc_pipe, "|-", "mpc $cmd")
      or die "Problem opening pipe to mpc $cmd";
  print $mpc_pipe @{$songs_ref};
  close($mpc_pipe) or die "Problem closing pipe to mpc $cmd";
}

sub pipe_to_mpc_add {
  my ($songs_ref) = @_;

  pipe_to_mpc_cmd($songs_ref, "add");
}

sub pipe_to_mpc_insert {
  my ($songs_ref) = @_;

  pipe_to_mpc_cmd($songs_ref, "insert");
}

=head1 NAME

msa - mpc search any

=head1 DESCRIPTION

This is a wrapper script for mpc's search functionality

=head1 SYNOPSIS

msa [OPTIONS]... [SEARCH_QUERY]...

If no SEARCH_QUERY, read standard input

  -c, --clear-queue      Clear song queue
  -e, --enqueue          Enqueue resulting songs
  -f, --filename         Search mpd database using a filename query
  -h, --help             Print this help and exit
  -i, --insert           Insert resulting songs
  -n, --number NUM       Limit the number of resulting songs to at most NUM songs
  -N, --new-queue        Create a new queue by clearing queue, enqueueing new songs, and playing
                             (alias for --clear-queue, --enqueue, --quiet, and --play-queue)
  -p, --play-queue       Play songs after they've been enqueued
  -q, --quiet            Don't print resulting songs to STDOUT
  -r, --regex REGEX      Search filenames using regular expressions (requires a regex inside quotes)
  -s, --shuffle          Print search results in a shuffled/random order
  -t, --show-cue-titles  Print cue file titles if they are returned
                             (Note: this option will take precedence over --shuffle)
  -x, --exclude REGEX    Filter out results that match the regular expression (requires regex inside quotes)

For more detailed documentation or examples, run C<perldoc msa>.

=head1 EXAMPLES

Prompt the user to enter in a string that will use mpc's search any functionality to look through the metadata of music files.
Any songs containing metadata with that string will be printed to the screen.

  $ msa

Any songs containing metadata with 'bohemian rhapsody' will be printed to the screen.
Quotes are not required for strings separated by spaces.

  $ msa bohemian rhapsody

Prompt the user to enter in a string that will use mpc's search filename functionality to look through the filenames of music files.
Any songs containing filenames with that string will be printed to the screen.

  $ msa -f

Any songs containing filenames with 'bites the dust' will be printed to the screen.
Again, quotes are not required for strings separated by spaces.

  $ msa -f bites the dust

Search filenames using regex.
Any filenames (which include the path to that file) that contain 'piano' followed by 'two' somewhere in the string will be returned.
If the regex contains any special characters or contains more than one word, it must be surrounded by quotes.
The regex is case insensitive.

  $ msa -r 'piano.*two'

Clear the queue, shuffle the results, and enqueue (at most) 75 songs with filenames containing either 'jazz' or 'classical',
and begin playing the songs.
Again, the regex is case insensitive.

  $ msa -Nsr 'jazz|classical' -n 75

Print all filenames that contain a '/' and don't include 'classic' or 'greatest'.

  $ msa -r '/' -x 'classic|greatest'

Print the titles of cue files if they are matching results.
The titles will be printed to STDERR, so the actual results can still be added to mpc queue.

Note: This option (--show-cue-titles|-t) will take precedence over --shuffle|-s.
Also, if this option is run with --regex, the program will run significantly slower.

  $ msa -t classical

  Here's what the result might look like for any cue files:

  Classical/Decca Ultimate/Ultimate Classical Guitar/CD2/CDImage.cue/track0017
        Vivaldi: Sonata, RV.85 - ii. Larghetto

=cut
