#!/usr/bin/perl
# Searxng up
# Pull down latest searxng image and start it up
# If an instance is already running, this will stop it and start a new one
use strict;
use warnings;
use Getopt::Long qw(GetOptions :config no_ignore_case bundling);
use Pod::Usage qw(pod2usage);

# CLI Flags/Variables
my $notify_flag = 0;
my $no_pull_flag = 0;

GetOptions(
  'help|h' => sub { pod2usage(0) },
  'notify|n' => \$notify_flag,
  'no-pull|P' => \$no_pull_flag,
) or pod2usage(1);

my $searxng_dir = "$ENV{'HOME'}/.otherPrograms/searxng-docker";
my $port = 8888;

my $container_name = get_container_name();

# Don't attempt to stop container if searx image isn't already running
if ($container_name) {
  system("docker stop $container_name");
}
chdir($searxng_dir) or die "Error: can't cd into $searxng_dir";
system("docker pull searxng/searxng") unless $no_pull_flag;
system("docker run --rm -d -v $searxng_dir/searxng:/etc/searxng -p $port:8080 -e BASE_URL=http://localhost:$port/ searxng/searxng");

if ($notify_flag && $? == 0) {
  system("notify-send 'sup' 'searxng container started'");
}

sub get_container_name {
  my @docker_ps_output = `docker ps`;

  foreach my $line (@docker_ps_output) {
    # Check for the line that uses the 'searxng/searxng' image and extract the
    # container name
    if ($line =~ /searxng\/searxng/ && $line =~ /(?<container_name>[a-z]+_[a-z]+\Z)/) {
      return $+{container_name};
    }
  }
}

=head1 NAME

sup - searxng up

=head1 DESCRIPTION

Pull down latest searxng image and start it up

If an instance is already running, this will stop it and start a new one

=head1 SYNOPSIS

sup [OPTION(s)]

=head1 OPTIONS

=over 4

=item B<-h, --help>

Print this help and quit

=item B<-n, --notify>

Use notify-send to let user know when container has been started

=item B<-P, --no-pull>

Don't run docker pull before starting new searxng container

=back

=cut
